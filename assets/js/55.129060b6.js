(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{400:function(t,n,e){"use strict";e.r(n);var r=e(1),a=Object(r.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_0-1-0-2-0-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_0-1-0-2-0-3"}},[t._v("#")]),t._v(" 0.1+0.2 !== 0.3")]),t._v(" "),n("h2",{attrs:{id:"为什么出现这种现象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么出现这种现象"}},[t._v("#")]),t._v(" 为什么出现这种现象")]),t._v(" "),n("p",[t._v("JavaScript 使用 Number 类型表示数字（整数和浮点数）,遵循 IEEE 754 标准通过 64 比特位 来表示数字（8 个字节）")]),t._v(" "),n("p",[t._v("在存储的过程中，某些小数转化成二进制的时候，出现一个无限循环的数。而尾数位只能存储最多 53 位有效数字，多出的数会进行四舍五入处理，所以出现精度丢失")]),t._v(" "),n("p",[t._v("哪些小数不会出现精度丢失：末尾以 5 结尾的例如 0.5、0.125、0.675")]),t._v(" "),n("h2",{attrs:{id:"如何解决"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何解决"}},[t._v("#")]),t._v(" 如何解决")]),t._v(" "),n("p",[t._v("通过一些第三方库来解决"),n("a",{attrs:{href:"https://mikemcl.github.io/bignumber.js/",target:"_blank",rel:"noopener noreferrer"}},[t._v("bignumber.js"),n("OutboundLink")],1),t._v("、"),n("a",{attrs:{href:"https://mathjs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("math.js"),n("OutboundLink")],1),t._v("、"),n("a",{attrs:{href:"https://mikemcl.github.io/decimal.js/",target:"_blank",rel:"noopener noreferrer"}},[t._v("decimal.js"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("或者通过转化成整数运算来规避这个问题")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 加法\nfunction add(a, b) {\n    const precision = Math.max(getPrecision(a), getPrecision(b));\n    return (multiply(a, Math.pow(10, precision)) + multiply(b, Math.pow(10, precision))) / Math.pow(10, precision);\n}\n\n// 减法\nfunction subtract(a, b) {\n    const precision = Math.max(getPrecision(a), getPrecision(b));\n    return (multiply(a, Math.pow(10, precision)) - multiply(b, Math.pow(10, precision))) / Math.pow(10, precision);\n}\n\n// 乘法\nfunction multiply(a, b) {\n    const precision = getPrecision(a) + getPrecision(b);\n    return (a * b) / Math.pow(10, precision);\n}\n\n// 除法\nfunction divide(a, b) {\n    const precision = Math.max(getPrecision(a), getPrecision(b));\n    return multiply(a, Math.pow(10, precision)) / multiply(b, Math.pow(10, precision));\n}\n\n// 获取小数位数\nfunction getPrecision(num) {\n    const str = String(num);\n    const decimalIndex = str.indexOf('.');\n    return decimalIndex === -1 ? 0 : str.length - decimalIndex - 1;\n}\n\n// 示例\nconst resultAdd = add(0.1, 0.2);\nconst resultSubtract = subtract(0.3, 0.1);\nconst resultMultiply = multiply(0.1, 0.2);\nconst resultDivide = divide(0.3, 0.1);\n\nconsole.log(resultAdd);      // 输出：0.3\nconsole.log(resultSubtract); // 输出：0.2\nconsole.log(resultMultiply); // 输出：0.02\nconsole.log(resultDivide);   // 输出：3\n\n")])])]),n("h2",{attrs:{id:"内存关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存关系"}},[t._v("#")]),t._v(" 内存关系")]),t._v(" "),n("p",[t._v("比特（Bit）： 最基本的存储单元，表示 0 或 1。")]),t._v(" "),n("p",[t._v("字节（Byte）： 由 8 个比特组成，可以表示 256 种不同的值。")]),t._v(" "),n("p",[t._v("千字节（KB，Kilobyte）： 由 1024 字节组成，即 2^10 字节。")]),t._v(" "),n("p",[t._v("兆字节（MB，Megabyte）： 由 1024 千字节组成，即 2^10KB，或者 2^20 字节。")]),t._v(" "),n("p",[t._v("千兆字节（GB，Gigabyte）： 由 1024 兆字节组成，即 2^10MB，或者 2^30 字节。")]),t._v(" "),n("p",[t._v("夸字节（TB，Terabyte）： 由 1024 千兆字节组成，即 2^10GB，或者 2^40 字节。")]),t._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("p",[t._v("由于计算机底层存储都是基于二进制的，需要先将十进制转换为二进制存储与计算，在整个转换过程中，像 0.1、0.2 这种数无法用二进制精确表示。JavaScript 采用的是 IEEE 754 双精确度标准，能够有效存储的位数为 52 位，所以就要做舍去操作，这就会引起精度丢失。另外在在 0.1 与 0.2 相加做对阶、求和、舍入过程中也会产生精度的丢失")])])}),[],!1,null,null,null);n.default=a.exports}}]);