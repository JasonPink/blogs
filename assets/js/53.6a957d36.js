(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{401:function(n,e,s){"use strict";s.r(e);var t=s(1),a=Object(t.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h3",{attrs:{id:"github-action-自动部署前端项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#github-action-自动部署前端项目"}},[n._v("#")]),n._v(" github action 自动部署前端项目")]),n._v(" "),e("ul",[e("li",[n._v("在 github setting 中添加所需使用的服务器配置信息\n"),e("ul",[e("li",[n._v("这个的目的是为了保证隐私，防止服务器配置暴露，配置后我们可以通过 secrets.xxx 的形式读取到我们的配置信息")]),n._v(" "),e("li",[n._v("这里我们添加了 SSH_HOST、SSH_USERNAME、SSH_PASSWORD 三个变量，编写脚本的时候会使用到")])])]),n._v(" "),e("li",[n._v("在项目根目录里的.github/workflows 文件夹上新建 deploy.yml\n"),e("ul",[e("li",[n._v("触发 workflows 时机配置成 main 分支 push 的时机")]),n._v(" "),e("li",[n._v("依次执行 steps")])])])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('# 工作流名称\nname: Deploy to Server\n# 指定此工作流程的触发事件Event：main分支存在push动作即触发\non:\n  push:\n    branches:\n      - main\n\njobs:\n  # job名称\n  build-and-deploy:\n    # 指定该Job在最新版本的 Ubuntu Linux 的 Runner(运行器)上运行\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: 拉取代码\n        uses: actions/checkout@v2\n\n      - name: 安装指定版本 Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: "18"\n\n      - name:\n          Cache\n          # 缓存命中结果会存储在steps.[id].outputs.cache-hit里，该变量在继后的step中可读\n        id: cache-dependencies\n        uses: actions/cache@v3\n        with:\n          # 缓存文件目录的路径\n          path: |\n            **/node_modules\n          # key中定义缓存标志位的生成方式。runner.OS指当前环境的系统。外加对yarn.lock内容生成哈希码作为key值，如果yarn.lock改变则代表依赖有变化。\n          # 这里用yarn.lock而不是package.json是因为package.json中还有version和description之类的描述项目但和依赖无关的属性\n          key: ${{runner.OS}}-${{hashFiles(\'**/yarn.lock\')}}\n\n      - name: 安装依赖\n        if: steps.cache-dependencies.outputs.cache-hit != \'true\'\n        run: yarn install\n\n      - name: 打包项目\n        run: yarn run build\n\n      - name: 压缩dist目录\n        run: cd dist && zip -r ../dist.zip ./*\n\n      - name: 传输dist.zip到远程服务器\n        uses: appleboy/scp-action@v0.1.5\n        with:\n          host: ${{ secrets.SSH_HOST }}\n          username: ${{ secrets.SSH_USERNAME }}\n          password: ${{ secrets.SSH_PASSWORD }}\n          source: "dist.zip"\n          target: "/www/server/phpmyadmin"\n\n      - name: 解压静态资源到指定目录\n        uses: appleboy/ssh-action@v0.1.5\n        with:\n          host: ${{ secrets.SSH_HOST }}\n          username: ${{ secrets.SSH_USERNAME }}\n          password: ${{ secrets.SSH_PASSWORD }}\n          script: |\n            cd /www/server/phpmyadmin\n            rm -rf web\n            unzip -o dist.zip -d web\n            rm -rf dist.zip\n\n            # 运行其他部署相关的命令，比如重启服务\n            # e.g., pm2 restart your-app\n\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);