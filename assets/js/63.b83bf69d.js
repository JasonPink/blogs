(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{410:function(t,o,r){"use strict";r.r(o);var a=r(1),n=Object(a.a)({},(function(){var t=this,o=t._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"for-in-与-for-of"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#for-in-与-for-of"}},[t._v("#")]),t._v(" for...in 与 for...of")]),t._v(" "),o("h2",{attrs:{id:"for-in"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#for-in"}},[t._v("#")]),t._v(" for...in")]),t._v(" "),o("p",[o("strong",[t._v("for...in 语句以任意顺序迭代一个对象的除 Symbol 以外的可枚举属性，包括继承的可枚举属性。")])]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v('Object.prototype.objCustom = function() {};\nArray.prototype.arrCustom = function() {};\n\nlet iterable = [3, 5, 7];\niterable.foo = \'hello\';\n\nfor (let i in iterable) {\n  console.log(i); // logs 0, 1, 2, "foo", "arrCustom", "objCustom"\n}\n\nfor (let i in iterable) {\n  if (iterable.hasOwnProperty(i)) {\n    console.log(i); // logs 0, 1, 2, "foo"\n  }\n}\n')])])]),o("p",[t._v("需要注意的一点是:用它循环对象，循环出来的"),o("strong",[t._v("属性顺序并不可靠")])]),t._v(" "),o("p",[t._v("在 MDN 上是这样描述的:"),o("strong",[t._v("for...in 不应该用于迭代一个关注索引顺序的 Array")])]),t._v(" "),o("p",[t._v("所以不要在 for...in 中做依赖对象属性的逻辑判断,例如下面这段代码最终遍历出来值的顺序与对象定义的顺序不太一样")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("const obj = {\n  '88': 'jack',\n  '12':'david',\n  \"23\": 'jason',\n  \"1\":'tom',\n}\n\nfor(let i in obj) {\n  console.log(obj[i]) // tom, david, jason, jack\n}\n")])])]),o("p",[t._v("为什么会这样呢？简单来讲就是：先遍历出整数属性（按照升序），然后其他属性按照创建时候的顺序遍历出来\n那么什么又是整数属性，我们可以用下面这段代码判断整数属性,如果判断为 true，prop 就是整数属性")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("String(Math.trunc(Number(prop)) === prop\n")])])]),o("h2",{attrs:{id:"for-of"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#for-of"}},[t._v("#")]),t._v(" for...of")]),t._v(" "),o("p",[o("strong",[t._v("for...of 语句在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句")])]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("Object.prototype.objCustom = function() {};\nArray.prototype.arrCustom = function() {};\n\nlet iterable = [3, 5, 7];\niterable.foo = 'hello';\n\nfor (let i of iterable) {\n  console.log(i); // logs 3, 5, 7\n}\n")])])]),o("p",[o("strong",[t._v("for...of 可以中断循环")])]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("var arr = [3, 5, 7];\n\nfor (let value of arr) {\n  console.log(value);\n  if (value == 5) {\n    break;\n  }\n}\n// 结果是：3,5\n")])])])])}),[],!1,null,null,null);o.default=n.exports}}]);