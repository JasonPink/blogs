(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{428:function(e,r,t){"use strict";t.r(r);var a=t(1),s=Object(a.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"ref-基本概念与使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ref-基本概念与使用"}},[e._v("#")]),e._v(" ref 基本概念与使用")]),e._v(" "),r("h2",{attrs:{id:"ref-对象的创建"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ref-对象的创建"}},[e._v("#")]),e._v(" ref 对象的创建")]),e._v(" "),r("ol",[r("li",[e._v("类组件 React.createRef")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("export default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.currentDom = React.createRef(null);\n  }\n  componentDidMount() {\n    console.log(this.currentDom);\n  }\n  render() {\n    return <div ref={this.currentDom}>ref对象模式获取元素或组件</div>;\n  }\n}\n")])])]),r("ol",{attrs:{start:"2"}},[r("li",[e._v("函数组件 useRef")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("export default function App() {\n  const currentDom = React.useRef(null);\n  React.useEffect(() => {\n    console.log(currentDom.current); // div\n  }, []);\n  return <div ref={currentDom}>ref对象模式获取元素或组件2</div>;\n}\n")])])]),r("h3",{attrs:{id:"函数组件为什么不能使用-createref"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#函数组件为什么不能使用-createref"}},[e._v("#")]),e._v(" 函数组件为什么不能使用 createRef？")]),e._v(" "),r("p",[e._v("类组件有一个实例 instance 能够维护 ref 信息，但函数组件每次更新都会重新运行，所有变量重新声明。为了解决这个问题，hooks 和函数组件对应的 fiber 对象建立起关联，将 useRef 产生的 ref 对象挂到函数组件对应的 fiber 上，函数组件每次执行，只要组件不被销毁，函数组件对应的 fiber 对象一直存在，所以 ref 等信息就会被保存下来")]),e._v(" "),r("h2",{attrs:{id:"类组件获取-ref-三种方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类组件获取-ref-三种方式"}},[e._v("#")]),e._v(" 类组件获取 Ref 三种方式")]),e._v(" "),r("ol",[r("li",[e._v("Ref 属性是一个字符串")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('<div ref="currentDom">字符串模式获取元素或组件</div>\n<Children ref="currentComInstance"/>\n\nconsole.log(this.refs)\n')])])]),r("ol",{attrs:{start:"2"}},[r("li",[e._v("Ref 属性是一个函数")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("<div ref={(node)=> this.currentDom = node}>Ref模式获取元素或组件</div>\n<Children ref={(node) => this.currentComponentInstance = node}/>\n")])])]),r("ol",{attrs:{start:"3"}},[r("li",[e._v("Ref 属性是一个 ref 对象")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("currentDom = React.createRef(null)\ncurrentComponentInstance = React.createRef(null)\n\n<div ref={ this.currentDom }>Ref对象模式获取元素或组件</div>\n<Children ref={ this.currentComponentInstance }/>\n")])])]),r("h2",{attrs:{id:"ref-高阶用法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ref-高阶用法"}},[e._v("#")]),e._v(" ref 高阶用法")]),e._v(" "),r("h3",{attrs:{id:"forwardref-转发-ref"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#forwardref-转发-ref"}},[e._v("#")]),e._v(" forwardRef 转发 Ref")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("React.forwardRef((props,ref)=> <Component grandRef={ref}  {...props} />)\n")])])]),r("h3",{attrs:{id:"合并转发-ref"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#合并转发-ref"}},[e._v("#")]),e._v(" 合并转发 ref")]),e._v(" "),r("h3",{attrs:{id:"高阶组件转发"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#高阶组件转发"}},[e._v("#")]),e._v(" 高阶组件转发")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("function HOC(Component){\n  class Wrap extends React.Component{\n     render(){\n        const { forwardedRef ,...otherprops  } = this.props\n        return <Component ref={forwardedRef}  {...otherprops}  />\n     }\n  }\n  return  React.forwardRef((props,ref)=> <Wrap forwardedRef={ref} {...props} /> )\n}\n")])])])])}),[],!1,null,null,null);r.default=s.exports}}]);