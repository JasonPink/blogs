(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{423:function(e,n,s){"use strict";s.r(n);var t=s(1),a=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"微前端实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#微前端实践"}},[e._v("#")]),e._v(" 微前端实践")]),e._v(" "),n("h3",{attrs:{id:"主应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主应用"}},[e._v("#")]),e._v(" 主应用")]),e._v(" "),n("p",[e._v("微应用通过一个 component 来承载，可以统一将微应用路由归并到这个组件路由来")]),e._v(" "),n("p",[e._v("通过正则匹配路由，只要是微应用的路由都可以匹配进来,路由配置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("{\n    path: '/:micro(micro-vue|micro-clouds|xxx):endPath(.*)',\n    name: 'MicroApp',\n    meta: { title: '微前端应用' },\n    component: () => import(/* webpackChunkName: \"qiankun\" */'@/views/qiankun/MicroApp.vue')\n}\n")])])]),n("p",[e._v("微应用配置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import useUserStore from '../../store/user';\nimport router from '@/router/index';\n\nconst userStore = useUserStore();\n\nexport const microApps = [\n  {\n    name: 'question-answering',\n    entry: process.env.VUE_APP_MICRO_QUESTION,\n    activeRule: '/question-answering',\n    container: '#subapp', // 子应用挂载的div\n    props: {\n      container: '#subapp',\n      routerBase: '/question-answering',\n      token: localStorage.getItem('main_token'),\n      userInfo: userStore.userInfo,\n      loginOut: userStore.loginOut,\n      mainRouter: router\n    }\n  }\n];\n")])])]),n("h3",{attrs:{id:"微应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#微应用"}},[e._v("#")]),e._v(" 微应用")]),e._v(" "),n("p",[e._v("微应用不需要额外安装任何其他依赖即可接入 qiankun 主应用，这里我们以 vue 技术栈为例")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("新增 public-path.js 文件，用于修改运行时的 publicPath")])]),e._v(" "),n("li",[n("p",[e._v("微应用建议使用 history 模式的路由，需要设置路由 base，值和它的 activeRule 是一样的。"),n("strong",[e._v("用于主应用匹配微应用的路由前缀")]),e._v(",因为可能存在多个微应用，所以每个微应用最好配置一个唯一前缀")])]),e._v(" "),n("li",[n("p",[e._v("在入口文件最顶部引入 public-path.js，修改并导出三个生命周期钩子函数\n微应用需要在自己的入口 js (通常就是你配置的 webpack 的 entry js) 导出 bootstrap、mount、unmount 三个生命周期钩子，以供主应用在适当的时机调用。")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("   export async function bootstrap() {\n        console.log('[vue] vue app bootstraped');\n   }\n\n   export async function mount(props) {\n        console.log('[vue] props from main framework', props);\n        render(props);\n   }\n\n   export async function unmount() {\n        instance.$destroy();\n        instance.$el.innerHTML = '';\n        instance = null;\n        router = null;\n   }\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[e._v("配置微应用的打包工具")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const packageName = require('./package.json').name;\n\nmodule.exports = {\n  output: {\n    library: `${packageName}-[name]`,\n    libraryTarget: 'umd',\n    chunkLoadingGlobal: `webpackJsonp_${packageName}`, //webpack v5\n    jsonpFunction: `webpackJsonp_${packageName}`, //webpack v4\n  },\n};\n")])])]),n("h3",{attrs:{id:"问题解决"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题解决"}},[e._v("#")]),e._v(" 问题解决")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("子应用路由跳转后，再点击主应用路由出错")]),e._v(" "),n("p",[e._v("可以将主应用的路由实例通过 props 传递给子应用，所有路由跳转统一使用主应用传递的实例")])]),e._v(" "),n("li",[n("p",[e._v("样式隔离")]),e._v(" "),n("p",[e._v("为防止各个应用间样式冲突，可以设置组件框架前缀,elementPlus 修改组件框架前缀")])])]),e._v(" "),n("ul",[n("li",[e._v("设置 ElConfigProvider")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n <el-config-provider namespace="unique_app_name">\n   <router-view></router-view>\n </el-config-provider>\n</template>\n')])])]),n("ul",[n("li",[e._v("设置 SCSS 和 CSS 变量")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@forward "element-plus/theme-chalk/src/mixins/config.scss" with (\n  $namespace: "unique_app_name"\n);\n')])])]),n("ul",[n("li",[e._v("在 vue.config.jss 中导入 styles/element/index.scss")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const AutoImport = require('unplugin-auto-import/webpack').default;\nconst Components = require('unplugin-vue-components/webpack').default;\nconst { ElementPlusResolver } = require('unplugin-vue-components/resolvers');\nconst ElementPlus = require('unplugin-element-plus/webpack');\nplugins: [\n    AutoImport({\n        resolvers: [\n            ElementPlusResolver({\n            importStyle: 'sass'\n            })\n        ]\n    }),\n    Components({\n        resolvers: [\n            ElementPlusResolver({\n            importStyle: 'sass'\n            })\n        ]\n    }),\n    ElementPlus({\n        useSource: true\n    })\n]\n")])])]),n("ul",[n("li",[e._v('解决 "使用了 element-plus 自定义命名空间之后导致 ElMessage 等通过 api 调用的组件无法获取到样式" 问题')])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// main.js\nimport "element-plus/theme-chalk/src/message.scss";\nimport "element-plus/theme-chalk/src/message-box.scss";\nimport "element-plus/theme-chalk/src/dialog.scss";\n')])])]),n("ul",[n("li",[e._v('全局替换业务代码里的 ".el-" 为 ".xx-"')])])])}),[],!1,null,null,null);n.default=a.exports}}]);