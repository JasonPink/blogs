(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{362:function(t,s,a){t.exports=a.p+"assets/img/husky.cabdbbfa.jpg"},363:function(t,s,a){t.exports=a.p+"assets/img/commitlint.fd5da289.jpg"},364:function(t,s,a){t.exports=a.p+"assets/img/eslint.56d4cdfc.jpg"},431:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git-规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-规范"}},[t._v("#")]),t._v(" Git 规范")]),t._v(" "),s("h2",{attrs:{id:"git-分支命名规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-分支命名规范"}},[t._v("#")]),t._v(" Git 分支命名规范")]),t._v(" "),s("ul",[s("li",[t._v("master：主分支，负责记录上线版本的迭代，该分支代码与线上代码完全一致。分支受保护不允许删除、开发，只允许合并版本分支代码，限制 merge 和 push 权限")]),t._v(" "),s("li",[t._v("version/develop: 版本迭代分支，总是从主分支创建，生命周期从版本开始到版本上线结束，不允许直接开发，只允许合并 feature 分支代码")]),t._v(" "),s("li",[t._v("feature/*: 功能开发分支，用于开发新的功能，不同的功能创建不同的功能分支。（强烈建议 feature 分支按功能粒度细化，本地可能同时存在多个 feature 分支并行开发，避免其中某个或者某些 feature 因为难以实现或延期不能随版本上线，从而可以延长生命周期到下个版本继续进行，或者因为实现错误，实验性质的 feature 导致中途抛弃）")]),t._v(" "),s("li",[t._v("bugfix/*：bug 修复分支，用于修复不紧急的 bug，普通 bug 均需要创建 bugfix 分支开发，开发完成自测没问题后合并到 develop 分支后，删除该分支。")]),t._v(" "),s("li",[t._v("release/*：发布分支，用于代码上线准备，该分支从 develop 分支创建，创建之后由测试同学发布到测试环境进行测试，测试过程中发现 bug 需要开发人员在该 release 分支上进行 bug 修复，所有 bug 修复完后，在上线之前，需要合并该 release 分支到 master 分支和 develop 分支。")]),t._v(" "),s("li",[t._v("hotfix：生产 bug 修复分支，该分支只有紧急情况下使用，从 master 分支创建，用于紧急修复线上 bug。修复完毕后，部署到相应环境测试，测试通过后上线。上线完成立即删除，并同步到各个环境分支")])]),t._v(" "),s("h2",{attrs:{id:"git-commit-规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-规范"}},[t._v("#")]),t._v(" Git commit 规范")]),t._v(" "),s("h3",{attrs:{id:"约定式提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#约定式提交"}},[t._v("#")]),t._v(" 约定式提交")]),t._v(" "),s("p",[t._v("每次使用 git commit 的时候都需要写 commit message,如果 message style 是按照固定的模版格式书写，对于后期的维护和编写 changelog 都有巨大的好处。\n而且现在的很多自动生成 changelog 的工具，都是建立在约定式提交的基础之上。交互式提交工具（例如： commitizen），使用工具能够保证约定式提交个格式是满足规范的")]),t._v(" "),s("h3",{attrs:{id:"约定式提交格式校验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#约定式提交格式校验"}},[t._v("#")]),t._v(" 约定式提交格式校验")]),t._v(" "),s("h4",{attrs:{id:"commitlint-校验约定式提交格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commitlint-校验约定式提交格式"}},[t._v("#")]),t._v(" commitlint 校验约定式提交格式")]),t._v(" "),s("p",[t._v("为了防止出现不满足格式要求的 commit message 出现，还是需要添加上必要的格式校验.使用 commitlint")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// commitlint.config.js")]),t._v("\nmodule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@commitlint/config-conventional"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"husky-配置-git-hooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#husky-配置-git-hooks"}},[t._v("#")]),t._v(" husky 配置 git hooks")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('{\n  "husky": {\n    "hooks": {\n      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS" // 配合commitlint使用\n      // "pre-commit": "lint-staged" // 配置lint-staged\n    }\n  }\n}\n')])])]),s("h4",{attrs:{id:"lint-staged-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lint-staged-配置"}},[t._v("#")]),t._v(" lint-staged 配置")]),t._v(" "),s("p",[t._v("list-staged 主要配合 linter 用来格式化代码（统一的代码风格），这部是可选的。是用来让格式化工具只 lint 需要提交的文件，其它文件忽略，这样能够提高效率。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('{\n  "husky": {\n    "hooks": {\n      "pre-commit": "lint-staged"\n    }\n  },\n  "lint-staged": {\n    "src/**/*.{js,ts,css,vue,tsx,jsx}": [\n      //"vue-cli-service lint", 配合vue使用\n      "eslint",\n      "git add"\n    ]\n  }\n}\n')])])]),s("h4",{attrs:{id:"自动生成-changelog"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动生成-changelog"}},[t._v("#")]),t._v(" 自动生成 changelog")]),t._v(" "),s("p",[t._v("自动生成 changelog 是建立在约定式提交的基础上。standard-version 做了自动打 tag，自动生成 changelog 等过程.")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('{\n  "scripts": {\n    "release": "standard-version",\n    "release:first": "standard-version -r 1.0.0"\n  },\n  // standard-version 好多配置看官方文档（可选）\n  "standard-version": {}\n}\n')])])]),s("h3",{attrs:{id:"完整配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完整配置"}},[t._v("#")]),t._v(" 完整配置")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('{\n  script: {\n    ...,\n    "commit": "git-cz",\n    "release": "standard-version",\n    "release:first": "standard-version -r 1.0.0"\n  },\n  devDependencies: {\n    "@commitlint/cli": "^14.1.0",\n    "@commitlint/config-conventional": "^14.1.0",\n    "commitizen": "^4.2.4",\n    "cz-conventional-changelog": "^3.3.0",\n    "husky": "^4.3.8",(用最新版7，有点问题)\n    "lint-staged": "^11.2.6",\n    "standard-version": "^9.3.2",\n  }\n  "config": {\n    "commitizen": {\n      "path": "./node_modules/cz-conventional-changelog"\n    }\n  },\n  "husky": {\n    "hooks": {\n      "pre-commit": "lint-staged",\n      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"\n    }\n  },\n  "lint-staged": {\n    "src/**/*.{js,css,vue,jsx,ts,tsx}": [\n      "prettier --write",\n      "eslint --cache --fix",\n      "git add"\n    ]\n  },\n  "standard-version": {}\n}\n')])])]),s("h3",{attrs:{id:"husky-新版配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#husky-新版配置"}},[t._v("#")]),t._v(" husky 新版配置")]),t._v(" "),s("p",[t._v("安装新版 husky: "),s("strong",[t._v("yarn add -D husky")])]),t._v(" "),s("p",[t._v("然后执行 husky 命令行工具，启用 git hook:"),s("strong",[t._v("npx husky install")])]),t._v(" "),s("p",[t._v("该命令会在当前项目中创建一个 .husky 目录，用来存放我们 git hook 脚本")]),t._v(" "),s("p",[t._v("执行"),s("strong",[t._v("git config --local --list")]),t._v(" ,可以看到当前 git 项目的本地配置有：core.hookspath=.husky")]),t._v(" "),s("p",[t._v("其他同事拉取项目时，他们可能会忘记执行上面的命令启用 git hook。但有一个命令他们是一定会执行的，就是执行 npm install 或 yarn 去安装依赖。于是我们需要利用 npm script 的生命周期脚本，加上一个 prepare。prepare 会在 install 之后执行。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('// package.json\n{\n  "scripts": {\n   // ...\n    "prepare": "husky install"\n  }\n}\n')])])]),s("p",[t._v("这样就能保证新同事拉项目并安装依赖后，husky 被启用。")]),t._v(" "),s("p",[t._v("创建 hook")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('\nnpx husky add .husky/pre-commit "npm test"\n\necho "npm test" > .husky/pre-commit // 最新版 v9.0.11 使用这种方式创建\n')])])]),s("p",[t._v("现在我们添加两个 hook")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('\necho "npx --no -- commitlint --edit \\$1" > .husky/commit-msg\necho "npm run lint-staged" > .husky/pre-commit\n')])])]),s("p",[t._v("成功后可以在.husky 目录下看到两个对应的脚本文件\n"),s("img",{attrs:{src:a(362),alt:"husky 目录",title:"husky目录"}})]),t._v(" "),s("p",[t._v("测试一下效果")]),t._v(" "),s("p",[t._v("提交不规范的 commit 信息")]),t._v(" "),s("p",[s("img",{attrs:{src:a(363),alt:"commintlint",title:"commintlint"}})]),t._v(" "),s("p",[t._v("提交未通过 eslint 校验的文件")]),t._v(" "),s("p",[s("img",{attrs:{src:a(364),alt:"eslint",title:"eslint"}})])])}),[],!1,null,null,null);s.default=e.exports}}]);