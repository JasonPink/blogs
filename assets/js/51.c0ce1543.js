(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{398:function(t,a,n){"use strict";n.r(a);var s=n(1),e=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"flex-布局最后一行列表左对齐的-n-种方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-布局最后一行列表左对齐的-n-种方法"}},[t._v("#")]),t._v(" flex 布局最后一行列表左对齐的 N 种方法")]),t._v(" "),a("p",[t._v("在 CSS flex 布局中，justify-content 属性可以控制列表的水平对齐方式，例如 space-between 值可以实现两端对齐。")]),t._v(" "),a("p",[t._v("但是，如果最后一行的列表的个数不满，则就会出现最后一行没有完全垂直对齐的问题。")]),t._v(" "),a("h2",{attrs:{id:"每一行列数固定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#每一行列数固定"}},[t._v("#")]),t._v(" 每一行列数固定")]),t._v(" "),a("ol",[a("li",[t._v("模拟 space-between 和间隙")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".list:not(:nth-child(4n)) {\n    margin-right: calc(4% / 3);\n}\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("根据个数最后一个元素动态 margin")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/* 如果最后一行是3个元素 */\n.list:last-child:nth-child(4n - 1) {\n    margin-right: calc(24% + 4% / 3);\n}\n/* 如果最后一行是2个元素 */\n.list:last-child:nth-child(4n - 2) {\n    margin-right: calc(48% + 8% / 3);\n}\n")])])]),a("h2",{attrs:{id:"每一行列数不固定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#每一行列数不固定"}},[t._v("#")]),t._v(" 每一行列数不固定")]),t._v(" "),a("p",[t._v("使用足够的空白标签进行填充占位，具体的占位数量是由最多列数的个数决定的，例如这个布局最多 7 列，那我们可以使用 7 个空白标签进行填充占位，最多 10 列，那我们需要使用 10 个空白标签。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<div class="container">\n    <div class="list"></div>\n    <div class="list"></div>\n    <div class="list"></div>\n    <div class="list"></div>\n    <div class="list"></div>\n    <div class="list"></div>\n    <div class="list"></div>\n    <i></i><i></i><i></i><i></i><i></i>\n</div>\n\n.container {\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    margin-right: -10px;\n}\n.list {\n    width: 100px; height:100px;\n    background-color: skyblue;\n    margin: 15px 10px 0 0;\n}\n/* 和列表一样的宽度和margin值 */\n.container > i {\n    width: 100px;\n    margin-right: 10px;\n}\n')])])]),a("h2",{attrs:{id:"每一项宽度不固定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#每一项宽度不固定"}},[t._v("#")]),t._v(" 每一项宽度不固定")]),t._v(" "),a("ol",[a("li",[t._v("最后一项 margin-right:auto")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/* 最后一项margin-right:auto */\n.list:last-child {\n    margin-right: auto;\n}\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("创建伪元素并设置 flex:auto 或 flex:1")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/* 使用伪元素辅助左对齐 */\n.container::after {\n    content: '';\n    flex: auto;    /* 或者flex: 1 */\n}\n")])])]),a("h2",{attrs:{id:"列数不固定-html-又不能调整"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列数不固定-html-又不能调整"}},[t._v("#")]),t._v(" 列数不固定 HTML 又不能调整")]),t._v(" "),a("p",[t._v("使用 Grid 布局,Grid 布局天然有 gap 间隙，且天然格子对齐排布，因此，实现最后一行左对齐可以认为是天生的效果")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".container {\n    display: grid;\n    justify-content: space-between;\n    grid-template-columns: repeat(auto-fill, 100px);\n    grid-gap: 10px;\n}\n.list {\n    width: 100px; height:100px;\n    background-color: skyblue;\n    margin-top: 5px;\n}\n")])])]),a("h1",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.zhangxinxu.com/wordpress/2019/08/css-flex-last-align/",target:"_blank",rel:"noopener noreferrer"}},[t._v("让 CSS flex 布局最后一行列表左对齐的 N 种方法"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);