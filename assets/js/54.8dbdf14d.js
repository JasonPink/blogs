(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{399:function(t,n,e){"use strict";e.r(n);var r=e(1),o=Object(r.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"发布静态资源到指定服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#发布静态资源到指定服务器"}},[t._v("#")]),t._v(" 发布静态资源到指定服务器")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import { exec } from "child_process";\nimport ssh from "ssh2";\nimport { resolve } from "path";\nimport fs from "fs";\nimport archiver from "archiver";\nimport ora from "ora";\nimport chalk from "chalk";\n\nconst spinner = ora(chalk.blue("正在发布到测试服务器..."));\n\nfunction zipDirectory(source, out) {\n\tconst archive = archiver("zip", { zlib: { level: 9 } });\n\tconst stream = fs.createWriteStream(out);\n\n\treturn new Promise((resolve, reject) => {\n\t\tarchive\n\t\t\t.directory(source, false)\n\t\t\t.on("error", err => reject(err))\n\t\t\t.pipe(stream);\n\n\t\tstream.on("close", () => resolve());\n\t\tarchive.finalize();\n\t});\n}\n\nfunction uploadToServer(config, localPath, remotePath) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst conn = new ssh.Client();\n\n\t\tconn\n\t\t\t.on("ready", () => {\n\t\t\t\tconsole.log(chalk.green("\\n服务器已连接"));\n\t\t\t\tconn.sftp((err, sftp) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst readStream = fs.createReadStream(localPath);\n\t\t\t\t\t\tconst writeStream = sftp.createWriteStream(remotePath);\n\n\t\t\t\t\t\twriteStream.on("close", () => {\n\t\t\t\t\t\t\tconn.end();\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\twriteStream.on("end", () => {\n\t\t\t\t\t\t\tconsole.log("SFTP connection closed");\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treadStream.pipe(writeStream);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})\n\t\t\t.connect(config);\n\t});\n}\n\nfunction unzipOnServer(config, remotePath, remoteDir) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst conn = new ssh.Client();\n\t\tconn\n\t\t\t.on("ready", () => {\n\t\t\t\tconn.exec(`unzip -o ${remotePath} -d ${remoteDir}`, (err, stream) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstream\n\t\t\t\t\t\t\t.on("close", (code, signal) => {\n\t\t\t\t\t\t\t\tif (code === 0) {\n\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treject(new Error(`Unzip failed with code ${code}`));\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconn.end();\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.stderr.on("data", data => {\n\t\t\t\t\t\t\t\tconsole.error(`Unzip error: ${data}`);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})\n\t\t\t.connect(config);\n\t});\n}\n\nasync function deploy() {\n\tconst config = {\n\t\thost: "",\n\t\tport: 22,\n\t\tusername: "",\n\t\tpassword: ""\n\t};\n\n\tconst localDistPath = resolve("dist");\n\tconst localZipPath = `${localDistPath}.zip`;\n\tconst remoteZipPath = "/home/zm-energy/front/jt-energy-efficiency/dist.zip";\n\tconst remoteUnzipDir = "/home/zm-energy/front/jt-energy-efficiency/dist";\n\n\ttry {\n\t\tawait zipDirectory(localDistPath, localZipPath);\n\t\tspinner.start();\n\t\tawait uploadToServer(config, localZipPath, remoteZipPath);\n\t\tawait unzipOnServer(config, remoteZipPath, remoteUnzipDir);\n\t\tspinner.stop();\n\t\tconsole.log(chalk.green("Success! 成功发布到测试服务器! \\n"));\n\t} catch (error) {\n\t\tconsole.log(chalk.red(`发布失败: ${error}`));\n\t}\n}\n\ndeploy();\n\n')])])]),n("h3",{attrs:{id:"发布静态资源到七牛云"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#发布静态资源到七牛云"}},[t._v("#")]),t._v(" 发布静态资源到七牛云")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('const fs = require("fs");\nconst path = require("path");\n\nconst chalk = require("chalk");\nconst ora = require("ora");\nconst Qiniu = require("qiniu");\n\nconst spinner = ora("upload files...");\n\nconst log = console.log;\n\nconst bucket = "91-web";\n\nconst getDir = () => {\n  const env = process.argv[2];\n  return (\n    {\n      dev: "ios-dev",\n      prod: "ios-web",\n    }[env] || "ios-dev"\n  );\n};\nconst dir = getDir();\n\nconst accessKey = "bJbXP3QsAX3nvcDsDYK990fcmSOKHO6T8i6fwxwS";\nconst secretKey = "heJLtWqCsRNfxGCmWZo2zN66In8yQj_wZsLoGp1A";\n\nconst mac = new Qiniu.auth.digest.Mac(accessKey, secretKey);\nconst options = {\n  scope: bucket,\n};\nvar putPolicy = new Qiniu.rs.PutPolicy(options);\nvar uploadToken = putPolicy.uploadToken(mac);\n\nconst formUploader = new Qiniu.form_up.FormUploader(Qiniu.conf);\nconst extra = new Qiniu.form_up.PutExtra();\n\nfunction readFiles(dir, paths = []) {\n  const files = fs.readdirSync(dir);\n\n  files.forEach((filename) => {\n    const fullPath = path.join(dir, filename);\n\n    const stat = fs.statSync(fullPath);\n\n    if (stat.isDirectory()) {\n      readFiles(path.join(dir, filename), paths);\n    } else {\n      paths.push(fullPath);\n    }\n  });\n}\n\nconst paths = [];\nreadFiles(path.join(__dirname, "..", "dist"), paths);\n\nconst promises = [];\nconst htmlPromises = [];\npaths.forEach((path) => {\n  const serverFileName = `${dir}/` + path.split("/dist/")[1];\n  const localFile = path;\n\n  const p = new Promise(function (resolve, reject) {\n    formUploader.putFile(\n      uploadToken,\n      serverFileName,\n      localFile,\n      extra,\n      (respErr, respInfo) => {\n        if (respErr) {\n          reject(path.split("/dist/")[1] + ": " + respErr);\n        } else {\n          resolve(\n            `upload success: 域名/${dir}/` + respInfo.key,\n          );\n        }\n      },\n    );\n  });\n\n  if (path.includes(".html")) {\n    // htmlPromises.push(p);\n  } else {\n    promises.push(p);\n  }\n});\n\nconst uploadHtml = async () => {\n  const options = {\n    scope: bucket + ":" + `${dir}/index.html`,\n  };\n\n  var putPolicy = new Qiniu.rs.PutPolicy(options);\n  var uploadToken = putPolicy.uploadToken(mac);\n\n  return new Promise((resolve, reject) => {\n    formUploader.putFile(\n      uploadToken,\n      `${dir}/index.html`,\n      path.join(__dirname, "..", "dist/index.html"),\n      extra,\n      (respErr) => {\n        if (respErr) {\n          reject("index.html");\n        } else {\n          resolve();\n        }\n      },\n    );\n  });\n};\n\nspinner.start();\nPromise.all(promises)\n  .then(async () => {\n    try {\n      await uploadHtml();\n    } catch (err) {\n      console.log("~~~err", err);\n    }\n    Promise.all(htmlPromises)\n      .then(() => {\n        spinner.stop();\n        log(chalk.black.bgGreen(" DONE "), "Upload files successfully.");\n        log(\n          chalk.black.bgBlue(" PREVIEW "),\n          chalk.blue(`域名/${dir}/index.html`),\n        );\n      })\n      .catch(function (err) {\n        spinner.stop();\n        log(chalk.red(err));\n      });\n  })\n  .catch(function (err) {\n    spinner.stop();\n    log(chalk.red(err));\n  });\n')])])]),n("h3",{attrs:{id:"发布静态资源到阿里云"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#发布静态资源到阿里云"}},[t._v("#")]),t._v(" 发布静态资源到阿里云")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const OSS = require('aliyun-oss')\nconst fs = require('fs')\nconst path = require('path')\nconst chalk = require('chalk')\nconst ora = require('ora')\n\nconst spinner = ora('upload files...')\n\nconst log = console.log\n\nconst option = require('./oss')\n\noption.bucket =\n  process.argv[2] === 'prod'\n    ? 'dongchamao-www'\n    : process.argv[2] === 'stage'\n    ? 'dongchamao-www-stage'\n    : 'dongchamao-www-test'\n\nconst oss = OSS.createClient(option)\n\nlet OSS_DIR_NAME = 'web/'\n\nif (process.argv[3]) {\n  OSS_DIR_NAME = process.argv[3]\n}\n\nfunction readFiles(dir, paths = []) {\n  const files = fs.readdirSync(dir)\n\n  files.forEach(filename => {\n    const fullPath = path.join(dir, filename)\n\n    const stat = fs.statSync(fullPath)\n\n    if (stat.isDirectory()) {\n      readFiles(path.join(dir, filename), paths)\n    } else {\n      paths.push(fullPath)\n    }\n  })\n}\n\nconst paths = []\nreadFiles(path.join(__dirname, '..', 'dist'), paths)\n\nconst promises = []\npaths.forEach(path => {\n  const p = new Promise(function (resolve, reject) {\n    const o = {\n      bucket: option.bucket,\n      object: OSS_DIR_NAME + path.split('/dist/')[1],\n      source: path\n    }\n\n    oss.putObject(o, (err, res) => {\n      if (err) {\n        reject(path.split('/dist/')[1] + ': ' + err)\n      } else {\n        resolve('upload success: ' + res.objectUrl)\n      }\n    })\n  })\n\n  promises.push(p)\n})\n\nspinner.start()\nPromise.all(promises)\n  .then(() => {\n    spinner.stop()\n    log(chalk.black.bgGreen(' DONE '), 'Upload files successfully.')\n    log(\n      chalk.black.bgBlue(' PREVIEW '),\n      chalk.blue(`https://${option.bucket}.oss-cn-hangzhou.aliyuncs.com/${OSS_DIR_NAME}index.html`)\n    )\n  })\n  .catch(function (err) {\n    spinner.stop()\n    log(chalk.red(err))\n  })\n")])])])])}),[],!1,null,null,null);n.default=o.exports}}]);