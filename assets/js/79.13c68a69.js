(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{433:function(e,t,r){"use strict";r.r(t);var s=r(1),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"eslint-与-prettier"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eslint-与-prettier"}},[e._v("#")]),e._v(" eslint 与 prettier")]),e._v(" "),t("h2",{attrs:{id:"vscode-安装插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vscode-安装插件"}},[e._v("#")]),e._v(" VSCode 安装插件")]),e._v(" "),t("ul",[t("li",[e._v("ESLint VSCode 插件， 主要的作用是会将有错的地方进行标记，方便我们知道哪些文件、哪些代码是有问题的")]),e._v(" "),t("li",[e._v("Prettier VSCode 插件，主要作用是代码格式化的时候按照项目约定的规范进行代码美化")])]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"安装-eslint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-eslint"}},[e._v("#")]),e._v(" 安装 ESlint")]),e._v(" "),t("p",[e._v("tips: 遇到一个问题，vscode 不显示语法错误，控制台有错误信息，折腾了很久，才发现是 vscode 版本跟 eslint 版本冲突，升级 vscode 版本就解决了")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 全局安装 ESLint\n$ npm install -g eslint\n\n# 初始化 ESLint 配置\n$ eslint --init\n")])])]),t("p",[e._v("经过一系列一问一答的环节后，你会发现在你文件夹的根目录生成了一个 .eslintrc.js，文件配置如下")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("module.exports = {\n\tenv: {// 环境\n\t\tbrowser: true,\n\t\tes2021: true,\n\t},\n\textends: [// 拓展\n\t\t'eslint:recommended',\n\t\t'plugin:@typescript-eslint/recommended',\n\t],\n\tparser: '@typescript-eslint/parser', // 解析器，本解析器支持Ts\n\tparserOptions: {// 解析器配置选项\n\t\tecmaVersion: 2020, // 指定es版本\n\t\tsourceType: 'module', // 代码支持es6，使用module\n\t},\n\tplugins: [// 插件\n\t\t'@typescript-eslint',\n\t],\n\trules: {\n\t\t// 规则\n\t},\n};\n")])])]),t("ol",[t("li",[t("p",[e._v("parserOptions-解析器选项")]),e._v(" "),t("ul",[t("li",[e._v("ecmaVersion\n"),t("ul",[t("li",[e._v("你可以使用 6、7、8、9 或 10 来指定你想要使用的 ECMAScript 版本")])])]),e._v(" "),t("li",[e._v("sourceType\n"),t("ul",[t("li",[e._v("设置为 script (默认) 或 module（如果你的代码是 ECMAScript 模块)")])])]),e._v(" "),t("li",[e._v("parser\n"),t("ul",[t("li",[e._v("babel-eslint (主要用于将 ECMAScript 2015+(es6+) 版本的代码转换为向后兼容的 JavaScript 语法)")]),e._v(" "),t("li",[e._v("@typescript-eslint/parser (该解析器将 TypeScript 转换成与 estree 兼容的形式， 允许 ESLint 验证 TypeScript 源代码)")])])]),e._v(" "),t("li",[e._v("ecmaFeatures (这是个对象，表示你想使用的额外的语言特性)\n"),t("ul",[t("li",[e._v("jsx - 启用 JSX")])])])])]),e._v(" "),t("li",[t("p",[e._v("env 和 golbals - 环境和全局变量")]),e._v(" "),t("ul",[t("li",[e._v("ESLint 会检测未声明的变量，并发出警告，但是有些变量是我们引入的库声明的，这里就需要提前在配置中声明")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "env": {\n        "browser": true,\n        "es2021": true,\n        "jquery": true // 环境中开启jquery，表示声明了jquery相关的全局变量，无需在globals二次声明\n    }\n}\n\n')])])])]),e._v(" "),t("li",[t("p",[e._v("rules - 规则")]),e._v(" "),t("ul",[t("li",[e._v("off 或 0：关闭规则")]),e._v(" "),t("li",[e._v("warn 或 1：开启规则，warn 级别的错误 (不会导致程序退出)")]),e._v(" "),t("li",[e._v("error 或 2：开启规则，error 级别的错误(当被触发的时候，程序会退出)")])])]),e._v(" "),t("li",[t("p",[e._v("plugins - 插件")]),e._v(" "),t("ul",[t("li",[e._v("我们要在项目中使用 TypeScript，需要将解析器改为@typescript-eslint/parser，同时需要安装@typescript-eslint/eslint-plugin 插件来拓展规则,"),t("strong",[e._v("添加的 plugins 中的规则默认是不开启的")])])])]),e._v(" "),t("li",[t("p",[e._v("extends - 拓展 - extends 可以理解为一份配置好的 plugin 和 rules")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "extends": [\n        "eslint:recommended", // 官方拓展\n        "plugin:@typescript-eslint/recommended", // 插件拓展\n        "standard", // npm 包，开源社区流行的配置方案，比如：eslint-config-airbnb、eslint-config-standard\n    ],\n    "rules": {\n        "indent": ["error", 4], // 拓展或覆盖 extends 配置的规则\n        "no-console": "off",\n    }\n};\n\n    ```\n')])])])])]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"安装-prettier"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-prettier"}},[e._v("#")]),e._v(" 安装 Prettier")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ npm install --save-dev --save-exact prettier\n\n$ yarn add --dev --exact prettier\n\nnpx prettier --write . #格式化所有文件\n\n")])])]),t("p",[e._v("配置文件支持多种形式")]),e._v(" "),t("ul",[t("li",[e._v("根目录创建.prettierrc 文件，能够写入 YML、JSON 的配置格式，并且支持.yaml、.yml、.json、.js 后缀")]),e._v(" "),t("li",[e._v("根目录创建.prettier.config.js 文件，并对外 export 一个对象")]),e._v(" "),t("li",[e._v("在 package.json 中新建 Prettier 属性")])]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"与-eslint-配合使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#与-eslint-配合使用"}},[e._v("#")]),e._v(" 与 ESLint 配合使用")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("解决思路是在 ESLint 的规则配置文件上做文章，安装特定的 plugin，把其配置到规则的尾部，实现 Prettier 规则对 ESLint 规则的覆盖\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    $ npm install --save-dev eslint-plugin-prettier\n    {\n        "extends": [\n            ...,\n            "已经配置的规则",\n        +   "plugin:prettier/recommended"\n        ],\n        "rules": {\n            "prettier/prettier": "error",\n        }\n    }\n')])])]),t("h2",{attrs:{id:"prettier-配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prettier-配置"}},[e._v("#")]),e._v(" Prettier 配置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("module.exports = {\n  printWidth: 80, // 80 每行代码长度\n  tabWidth: 2, // 每个 tab 相当于多少个空格\n  useTabs: false, // 是否使用 tab 进行缩进\n  singleQuote: true, // 是否使用单引号\n  semi: true, // 声明结尾使用分号\n  trailingComma: 'none', // 对象尾逗号\n  bracketSpacing: true, // 对象字面量的大括号间使用空格\n  jsxSingleQuote: false,\n  jsxBracketSameLine: false, // false 多行 jsx 中的 > 放在最后一行，而不是另起一行\n  arrowParens: 'avoid', // avoid 只有一个参数是否带圆括号\n  vueIndentScriptAndStyle: true, // vue文件的script标签和Style标签下的内容需要缩进\n  singleAttributePerLine: false, // 在 HTML、Vue 和 JSX 中每行强制执行单个属性\n  embeddedLanguageFormatting: 'auto' // 控制 Prettier 是否格式化文件中嵌入的引用代码\n};\n\n")])])]),t("h2",{attrs:{id:"打开-vscode-配置文件-setting-json"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#打开-vscode-配置文件-setting-json"}},[e._v("#")]),e._v(" 打开 vscode 配置文件 setting.json")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("设置代码在保存的时候自动格式化")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"editor.formatOnSave": true\n')])])])]),e._v(" "),t("li",[t("p",[e._v("设置 .js .ts .jsx .tsx .less .css .json 格式的文件都采用 prettier-vscode 插件进行格式化")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    "[javascript]": {\n         "editor.defaultFormatter": "esbenp.prettier-vscode"\n     },\n     "[typescript]": {\n         "editor.defaultFormatter": "esbenp.prettier-vscode"\n     },\n     "[javascript|react]": {\n         "editor.defaultFormatter": "esbenp.prettier-vscode"\n     },\n     "[typescript|react]": {\n         "editor.defaultFormatter": "esbenp.prettier-vscode"\n     },\n     "[less]": {\n         "editor.defaultFormatter": "esbenp.prettier-vscode"\n     },\n     "[css]": {\n         "editor.defaultFormatter": "esbenp.prettier-vscode"\n     },\n     "[json]": {\n         "editor.defaultFormatter": "esbenp.prettier-vscode"\n     }\n')])])])]),e._v(" "),t("li",[t("p",[e._v("配置 prettier 插件读取项目中哪个配置文件，默认是根目录下的 .prettierrc 文件，如果你的项目下不是这个文件就需要修改为你的配置文件，比如很多项目为 .prettierrc.js 或者 .prettierrc.ts")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"prettier.configPath": ".prettierrc.js",\n')])])])])]),e._v(" "),t("hr")])}),[],!1,null,null,null);t.default=n.exports}}]);